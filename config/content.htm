<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲: <a href="https://github.com/mdecp2024/hw-41323144">https://github.com/mdecp2024/hw-41323144</a> </p>
<p>個人網站: <a href="https://mdecp2024.github.io/hw-41323144">https://mdecp2024.github.io/hw-41323144</a> </p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h4></h4>
<h3>HW 1 Exam</h3>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w11_hw</h3>
<p>1.  已知可以用 Python 程式<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a>, 或<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL)</p>
<p><span class="hljs-keyword"><a href="https://gist.githubusercontent.com/41323144/5c1ea2e08efa469331f033853152c1ca/raw/fc9f14385973800b8b51d19fad82699472687241/w1">星星圓圈</a></span></p>
<p><span class="hljs-keyword"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/wPB336SfdB4" width="560"></iframe></span></p>
<p><span class="hljs-keyword"></span></p>
<p>2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/bEeSbzmzgQg" width="560"></iframe><span></span></p>
<p><a href="https://gist.githubusercontent.com/41323144/ef9b822ae0289ae321d3af09ada9cdad/raw/740b04a0319ccb4227fee9a3462d2d7b66cc8e0c/w1">黑色方塊圓圈</a></p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/f95909804a1f134963cade8463eeb9bd32129ea8/grid_line_and_fill_in_Brython.py">網頁上的方格與塗色</a></p>
<p>3. 完成上列題目後, 請利用 Youtube 影片<span>簡報</span>個人的解題過程與心得.</p>
<p>利用CHATGPT讓我們聊解程式之多變性與其廣泛的應用</p>
<h3>w10</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/vZtwhtCmj4o" width="560"></iframe><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/evblUcrUr4Q" width="560"></iframe><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/jlTZNUlgac8" width="560"></iframe></p>
<h3>w7</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/8HiMfIXXSO8" width="560"></iframe></p>
<p><br/><video controls="controls" height="150" width="300">
<source src="https://studio.youtube.com/video/LYvkElTpIDE/edit"/></video>w12_hw</p>
<p></p>
<h3>w12_hw</h3>
<p><a href="https://gist.githubusercontent.com/41323144/009827390e105c5236d876bc413f0c2f/raw/89ee4696d8013fee22bbda96145a3c3852167a48/w1"></a></p>
<p><a href="https://gist.githubusercontent.com/41323144/009827390e105c5236d876bc413f0c2f/raw/89ee4696d8013fee22bbda96145a3c3852167a48/w1">for和print迴圈</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/LYvkElTpIDE" width="560"></iframe></p>
<p></p>
<h3>w13_hw</h3>
<!-- 引入 Brython 程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload = function() {
    brython({debug:1, pythonpath:['/static/', '../../downloads/py/']});
}
</script>
<!-- 設置容器 -->
<div id="brython div1"></div>
<!-- 利用 Brython 繪圖 -->
<script type="text/python">
from browser import html
from browser import document as doc

# 利用 HTML 建立 canvas 並定義特性
canvas = html.CANVAS(width=600, height=600)
brython_div = doc["brython div1"]
brython_div <= canvas
ctx = canvas.getContext("2d")

# 畫兩個矩形 (紅色邊框)
ctx.strokeStyle = '#FF0000'  # Red
ctx.beginPath()
ctx.rect(100, 100, 200, 200)
ctx.rect(200, 200, 200, 200)
ctx.stroke()

# 畫對角線 (藍色)
ctx.strokeStyle = '#0000FF'  # Blue
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.stroke()

# 畫兩個圓形 (黑色)
ctx.strokeStyle = '#000000'  # Black
ctx.beginPath()
ctx.arc(200, 200, 141.4, 0, 2 * 3.14)
ctx.stroke()
ctx.beginPath()
ctx.arc(300, 300, 141.4, 0, 2 * 3.14)
ctx.stroke()

# 判斷點的位置
def point_in_circle1(x, y):
    cx, cy, r = 200, 200, 141.4
    return (x - cx) ** 2 + (y - cy) ** 2 < r ** 2

def point_in_square1(x, y):
    return 100 <= x <= 300 and 100 <= y <= 300

def point_outside_square1(x, y):
    return not point_in_square1(x, y)

def point_in_circle2(x, y):
    cx, cy, r = 300, 300, 141.4
    return (x - cx) ** 2 + (y - cy) ** 2 < r ** 2

def point_inside_square2(x, y):
    return 200 <= x <= 400 and 200 <= y <= 400

def point_on_line_segment(x, y):
    return y == x and 100 <= x <= 300 and 100 <= y <= 300

def point_above_line(x, y):
    return y < x

def point_below_line(x, y):
    return y > x

# 判斷點是否在正方形的上方、下方、左方、右方
def point_above_square1(x, y):
    return y < 100

def point_below_square1(x, y):
    return y > 300

def point_left_of_square1(x, y):
    return x < 100

def point_right_of_square1(x, y):
    return x > 300

def point_above_square2(x, y):
    return y < 200

def point_below_square2(x, y):
    return y > 400

def point_left_of_square2(x, y):
    return x < 200

def point_right_of_square2(x, y):
    return x > 400

# 取得點所屬區域的函式
def get_region(x, y):
    regions = []
    if point_in_circle1(x, y):
        regions.append("circle1")
    if point_in_square1(x, y):
        regions.append("inside_square1")
    if point_outside_square1(x, y):
        regions.append("outside_square1")
    if point_in_circle2(x, y):
        regions.append("circle2")
    if point_inside_square2(x, y):
        regions.append("inside_square2")
    if point_on_line_segment(x, y):
        regions.append("on_line_segment")
    if point_above_line(x, y):
        regions.append("above_line")
    if point_below_line(x, y):
        regions.append("below_line")
    
    # 新增正方形上下左右區分
    if point_above_square1(x, y):
        regions.append("above_square1")
    if point_below_square1(x, y):
        regions.append("below_square1")
    if point_left_of_square1(x, y):
        regions.append("left_of_square1")
    if point_right_of_square1(x, y):
        regions.append("right_of_square1")
    
    if point_above_square2(x, y):
        regions.append("above_square2")
    if point_below_square2(x, y):
        regions.append("below_square2")
    if point_left_of_square2(x, y):
        regions.append("left_of_square2")
    if point_right_of_square2(x, y):
        regions.append("right_of_square2")
    
    return regions

# 根據區域屬性決定顏色
def get_region_color(x, y):
    regions = get_region(x, y)

    # 只要點不在兩個圓內，則不進行顏色標註
    if "circle1" not in regions and "circle2" not in regions:
        return None  # 圓外區域不著色

    # 第一個圓內且第二個圓內
    if "circle1" in regions and "circle2" in regions:
        return "#FF60AF"  # Purple

    # 第一個圓內且在第一個正方形內部
    if "circle1" in regions and "inside_square1" in regions:
        if point_above_line(x, y):
            return "#6F00D2"  # Green
        elif point_below_line(x, y):
            return "#E800E8"  # Yellow

    # 第一個圓內且不在第一個正方形內部
    if "circle1" in regions and "outside_square1" in regions:
        if point_above_square1(x, y):
            return "#00E3E3"  # Cyan
        elif point_below_square1(x, y):
            return "#0080FF"  # Magenta
        elif point_left_of_square1(x, y):
            return "#00DB00"  # Orange
        elif point_right_of_square1(x, y):
            return "#02DF82"  # Brown

    # 第二個圓內且在第二個正方形內部
    if "circle2" in regions and "inside_square2" in regions:
        return "#FFA6FF"  # Red

    # 第二個圓內但不在第二個正方形內部
    if "circle2" in regions and "outside_square2" in regions:
        if point_above_square2(x, y):
            return "#BE77FF"  # Lightblue
        elif point_below_square2(x, y):
            return "#EA0000"  # Pink
        elif point_left_of_square2(x, y):
            return "#6F00D2"  # Lightgreen
        elif point_right_of_square2(x, y):
            return "#2828FF"  # Lightyellow

    # 標註對角線位置
    if "on_line_segment" in regions:
        return "#FFDC35"  # Black
    elif "above_line" in regions:
        return "#46A3FF"  # Orange
    elif "below_line" in regions:
        return "#00A600"  # Pink

    return None  # 沒有符合的區域，則不著色

# 繪製掃描點並著色
def scan_and_draw():
    for y in range(0, canvas.height, 1):  # 每1個像素掃描一次
        for x in range(0, canvas.width, 1):
            color = get_region_color(x, y)
            if color:
                ctx.fillStyle = color
                ctx.beginPath()
                ctx.arc(x + 1, y + 1, 1, 0, 2 * 3.14)  # 用圓點標示
                ctx.fill()

# 開始掃描和標示
scan_and_draw()
</script>
<h3>W14_hw</h3>
<p><a href="/get_page/W14_hw/pip install flask flask_cors bs4 lxml pelican markdown gevent"></a></p>
<p><a href="https://gist.githubusercontent.com/41323144/69a50495355a97d14f81780cd8beaa66/raw/a2f2ec2d15ced1ccd7a93178bf0a2f6fa33de62c/W14_hw">三個圓著色</a></p>
<!-- 引入 Brython 程式庫 -->
<script src="/get_page/cmsimde/static/brython.js"></script>
<script src="/get_page/cmsimde/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload = function() {
    brython({debug:1, pythonpath:['./../cmsimde/static/', '../../downloads/py/']});
}
</script>
<!-- 設置容器 -->
<div id="brython div1"></div>
<!-- 利用 Brython 繪圖 -->
<script type="text/python">
from browser import html
from browser import document as doc
 
# 利用 HTML 建立 canvas 並定義特性
canvas = html.CANVAS(width=600, height=600)
brython_div = doc["brython div1"]
brython_div <= canvas
ctx = canvas.getContext("2d")

from browser import html
from browser import document as doc
import random
import math

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    """
    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。
    返回畫布元素和它的 2D 繪圖上下文。
    """
    # 創建一個 canvas 元素，並設置其寬度與高度
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    # 將創建的 canvas 元素添加到指定的 HTML div 元素中
    brython_div = doc[id]  # 獲取指定 id 的 div 元素
    brython_div <= canvas  # 將 canvas 插入到該 div 中
    
    # 獲取 canvas 的 2D 繪圖上下文，這是進行繪圖的主要接口
    ctx = canvas.getContext("2d")
    
    # 返回畫布和它的 2D 繪圖上下文
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    """
    生成一個隨機的 RGB 顏色字符串。
    返回的顏色是 "rgb(r, g, b)" 格式，其中 r, g, b 是 0 到 255 之間的隨機整數。
    """
    r = random.randint(0, 255)  # 隨機生成紅色成分 (0-255)
    g = random.randint(0, 255)  # 隨機生成綠色成分 (0-255)
    b = random.randint(0, 255)  # 隨機生成藍色成分 (0-255)
    return f"rgb({r}, {g}, {b})"  # 返回隨機顏色字符串

# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    """
    判斷一個點 (px, py) 是否位於圓 (cx, cy, r) 內。
    (cx, cy) 為圓心坐標，r 為圓的半徑。
    """
    # 使用圓的方程 (px - cx)² + (py - cy)² <= r² 判斷點是否在圓內
    return (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2

# 使用者設定的圓心座標和半徑，並進行掃描線填充
def draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):
    """
    根據傳入的三個圓的圓心和半徑，繪製圓形並使用掃描線算法填充區域。
    x1, y1, r1 是圓1的圓心坐標和半徑
    x2, y2, r2 是圓2的圓心坐標和半徑
    x3, y3, r3 是圓3的圓心坐標和半徑
    """
    # 初始化畫布，創建並取得畫布和其 2D 上下文
    canvas, ctx = initialize_canvas(400, 400)
    
    # 清空畫布，以便重新繪製
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    
    # 顏色區域存儲字典，存儲不同區域的顏色
    color_dict = {}
    
    # 使用掃描線方法填充區域，逐行掃描畫布上的每個像素
    for py in range(0, canvas.height):  # 遍歷每一行的 y 坐標
        # 當前掃描線的顏色初始化為 None，後面會根據位置選擇顏色
        current_color = None 
        
        # 遍歷當前行中的每個像素點 (px, py)
        for px in range(0, canvas.width):  # 遍歷每一列的 x 坐標
            # 判斷該點是否在圓1內
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
            # 判斷該點是否在圓2內
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
            # 判斷該點是否在圓3內
            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)
            
            if in_circle1 and in_circle2 and in_circle3:
                # 如果點同時在三個圓內，則是交集區域
                if "intersection" not in color_dict:
                    # 如果還沒有為交集區域分配顏色，則分配一個隨機顏色
                    color_dict["intersection"] = random_color_generator()
                current_color = color_dict["intersection"]
            elif in_circle1 and in_circle2:
                # 如果點在圓1和圓2的交集區域
                if "circle1_and_circle2" not in color_dict:
                    color_dict["circle1_and_circle2"] = random_color_generator()
                current_color = color_dict["circle1_and_circle2"]
            elif in_circle2 and in_circle3:
                # 如果點在圓2和圓3的交集區域
                if "circle2_and_circle3" not in color_dict:
                    color_dict["circle2_and_circle3"] = random_color_generator()
                current_color = color_dict["circle2_and_circle3"]
            elif in_circle1 and in_circle3:
                # 如果點在圓1和圓3的交集區域
                if "circle1_and_circle3" not in color_dict:
                    color_dict["circle1_and_circle3"] = random_color_generator()
                current_color = color_dict["circle1_and_circle3"]
            elif in_circle1:
                # 如果點只在圓1內
                if "circle1" not in color_dict:
                    color_dict["circle1"] = random_color_generator()
                current_color = color_dict["circle1"]
            elif in_circle2:
                # 如果點只在圓2內
                if "circle2" not in color_dict:
                    color_dict["circle2"] = random_color_generator()
                current_color = color_dict["circle2"]
            elif in_circle3:
                # 如果點只在圓3內
                if "circle3" not in color_dict:
                    color_dict["circle3"] = random_color_generator()
                current_color = color_dict["circle3"]
            else:
                # 如果點不在任何圓內，則是背景區域
                current_color = "white"  # 背景色設為白色
            
            # 設置當前像素的顏色並進行填充
            ctx.fillStyle = current_color
            # 填充當前像素 (px, py)，並且寬度和高度均為 1 像素
            ctx.fillRect(px, py, 1, 1)  # 填充一個像素

# 直接設定三個圓心和半徑
x1, y1, r1 = 150, 200, 100  # 圓1：圓心 (150, 200)，半徑 100
x2, y2, r2 = 250, 200, 100  # 圓2：圓心 (250, 200)，半徑 100
x3, y3, r3 = 200, 100, 100  # 圓3：圓心 (200, 100)，半徑 100

# 呼叫畫圓函式，並繪製三個圓
draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3)
>
</script><h3>w15</h3>
<p>題目1</p>
<p><a href="https://mdecp2024.github.io/hw-41323144/content/Brython.html?src=https://gist.githubusercontent.com/41323144/01a43c886017e6f9d27c24257bfa321a/raw/abf127b35e6ccd75e34276edb797c989d9598f2d/hw1.py">從 1 累加到 100</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 變數 total_sum 初始為 0
total_sum = 0

def add_numbers(start, end):
    total = 0  # 內部函式中局部變數 total，用來累加
    # 使用 for 迴圈進行累加
    for i in range(start, end + 1):
        total += i  # 使用加法運算符進行累加

    print(f"從 {start} 累加到 {end} 的結果是: {total}")
    
    return total  # 返回結果

# 初始和結束的範圍
start, end = 1, 100

# 分別計算 1 到 50 和 51 到 100 的累加
sum1_to_50 = add_numbers(start, 50)
sum51_to_100 = add_numbers(51, end)

# 計算總和並顯示結果
total = sum1_to_50 + sum51_to_100
print(f"從 {start} 累加到 {end} 的總和是: {total}")</pre>
<p></p>
<!-- 利用 Brython 繪圖 -->
<script type="text/python">
from browser import html
from browser import document as doc

# 利用 HTML 建立 canvas 並定義特性
canvas = html.CANVAS(width=600, height=600)
brython_div = doc["brython div1"]
brython_div <= canvas
ctx = canvas.getContext("2d")

# 畫兩個矩形 (紅色邊框)
ctx.strokeStyle = '#FF0000'  # Red
ctx.beginPath()
ctx.rect(100, 100, 200, 200)
ctx.rect(200, 200, 200, 200)
ctx.stroke()

# 畫對角線 (藍色)
ctx.strokeStyle = '#0000FF'  # Blue
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.stroke()

# 畫兩個圓形 (黑色)
ctx.strokeStyle = '#000000'  # Black
ctx.beginPath()
ctx.arc(200, 200, 141.4, 0, 2 * 3.14)
ctx.stroke()
ctx.beginPath()
ctx.arc(300, 300, 141.4, 0, 2 * 3.14)
ctx.stroke()

# 判斷點的位置
def point_in_circle1(x, y):
    cx, cy, r = 200, 200, 141.4
    return (x - cx) ** 2 + (y - cy) ** 2 < r ** 2

def point_in_square1(x, y):
    return 100 <= x <= 300 and 100 <= y <= 300

def point_outside_square1(x, y):
    return not point_in_square1(x, y)

def point_in_circle2(x, y):
    cx, cy, r = 300, 300, 141.4
    return (x - cx) ** 2 + (y - cy) ** 2 < r ** 2

def point_inside_square2(x, y):
    return 200 <= x <= 400 and 200 <= y <= 400

def point_on_line_segment(x, y):
    return y == x and 100 <= x <= 300 and 100 <= y <= 300

def point_above_line(x, y):
    return y < x

def point_below_line(x, y):
    return y > x

# 判斷點是否在正方形的上方、下方、左方、右方
def point_above_square1(x, y):
    return y < 100

def point_below_square1(x, y):
    return y > 300

def point_left_of_square1(x, y):
    return x < 100

def point_right_of_square1(x, y):
    return x > 300

def point_above_square2(x, y):
    return y < 200

def point_below_square2(x, y):
    return y > 400

def point_left_of_square2(x, y):
    return x < 200

def point_right_of_square2(x, y):
    return x > 400

# 取得點所屬區域的函式
def get_region(x, y):
    regions = []
    if point_in_circle1(x, y):
        regions.append("circle1")
    if point_in_square1(x, y):
        regions.append("inside_square1")
    if point_outside_square1(x, y):
        regions.append("outside_square1")
    if point_in_circle2(x, y):
        regions.append("circle2")
    if point_inside_square2(x, y):
        regions.append("inside_square2")
    if point_on_line_segment(x, y):
        regions.append("on_line_segment")
    if point_above_line(x, y):
        regions.append("above_line")
    if point_below_line(x, y):
        regions.append("below_line")
    
    # 新增正方形上下左右區分
    if point_above_square1(x, y):
        regions.append("above_square1")
    if point_below_square1(x, y):
        regions.append("below_square1")
    if point_left_of_square1(x, y):
        regions.append("left_of_square1")
    if point_right_of_square1(x, y):
        regions.append("right_of_square1")
    
    if point_above_square2(x, y):
        regions.append("above_square2")
    if point_below_square2(x, y):
        regions.append("below_square2")
    if point_left_of_square2(x, y):
        regions.append("left_of_square2")
    if point_right_of_square2(x, y):
        regions.append("right_of_square2")
    
    return regions

# 根據區域屬性決定顏色
def get_region_color(x, y):
    regions = get_region(x, y)

    # 只要點不在兩個圓內，則不進行顏色標註
    if "circle1" not in regions and "circle2" not in regions:
        return None  # 圓外區域不著色

    # 第一個圓內且第二個圓內
    if "circle1" in regions and "circle2" in regions:
        return "#FF60AF"  # Purple

    # 第一個圓內且在第一個正方形內部
    if "circle1" in regions and "inside_square1" in regions:
        if point_above_line(x, y):
            return "#6F00D2"  # Green
        elif point_below_line(x, y):
            return "#E800E8"  # Yellow

    # 第一個圓內且不在第一個正方形內部
    if "circle1" in regions and "outside_square1" in regions:
        if point_above_square1(x, y):
            return "#00E3E3"  # Cyan
        elif point_below_square1(x, y):
            return "#0080FF"  # Magenta
        elif point_left_of_square1(x, y):
            return "#00DB00"  # Orange
        elif point_right_of_square1(x, y):
            return "#02DF82"  # Brown

    # 第二個圓內且在第二個正方形內部
    if "circle2" in regions and "inside_square2" in regions:
        return "#FFA6FF"  # Red

    # 第二個圓內但不在第二個正方形內部
    if "circle2" in regions and "outside_square2" in regions:
        if point_above_square2(x, y):
            return "#BE77FF"  # Lightblue
        elif point_below_square2(x, y):
            return "#EA0000"  # Pink
        elif point_left_of_square2(x, y):
            return "#6F00D2"  # Lightgreen
        elif point_right_of_square2(x, y):
            return "#2828FF"  # Lightyellow

    # 標註對角線位置
    if "on_line_segment" in regions:
        return "#FFDC35"  # Black
    elif "above_line" in regions:
        return "#46A3FF"  # Orange
    elif "below_line" in regions:
        return "#00A600"  # Pink

    return None  # 沒有符合的區域，則不著色

# 繪製掃描點並著色
def scan_and_draw():
    for y in range(0, canvas.height, 1):  # 每1個像素掃描一次
        for x in range(0, canvas.width, 1):
            color = get_region_color(x, y)
            if color:
                ctx.fillStyle = color
                ctx.beginPath()
                ctx.arc(x + 1, y + 1, 1, 0, 2 * 3.14)  # 用圓點標示
                ctx.fill()

# 開始掃描和標示
scan_and_draw()
</script><h1>HW2</h1>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>